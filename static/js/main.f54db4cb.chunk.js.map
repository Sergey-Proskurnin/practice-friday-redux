{"version":3,"sources":["components/ContactForm/contactForm.module.css","components/App/app.module.css","components/ContactList/contactList.module.css","redux/phoneBook/phonebook-actions.js","redux/phoneBook/phonebook-operations.js","components/ContactForm/ContactForm.js","helpers/filterContacts.js","components/ContactList/ContactList.js","components/ContactList/ContactList.container.js","components/ContactFilter/ContactFilter.js","components/App/App.js","redux/phoneBook/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","getContactRequest","getContactSuccess","getContactError","filterContact","axios","defaults","baseURL","connect","state","dispatch","addContact","contact","post","then","response","data","catch","error","onSetName","name","onAddContact","number","reset","className","style","form","onSubmit","e","preventDefault","marginBottom","value","type","pattern","title","placeholder","required","onInput","labelPhone","button","getFilteredContacts","contacts","filter","toLowerCase","includes","trim","ContactList","deleteContact","onContactFetch","contactsArr","useEffect","list","map","id","onClick","phonebookContacts","phonebookFilter","delete","get","onSetFilter","target","initilState","App","useState","setState","prev","JSON","parse","localStorage","getItem","app","createReducer","payload","_","loading","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f54db4cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"contactForm_button__3HVT5\",\"labelPhone\":\"contactForm_labelPhone__1LxPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__Y-X1m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactList_list__2rOYU\"};","import { createAction } from '@reduxjs/toolkit';\n// import shortid from 'shortid';\n\n// export const addContact = createAction('phonebook/addContact', contact => ({\n//   payload: { ...contact, id: shortid.generate() },\n// }));\n\n// export const deleteContact = createAction('phonebook/deleteContact');\n\nexport const addContactRequest = createAction('phonebook/addContactRequest');\nexport const addContactSuccess = createAction('phonebook/addContactSuccess');\nexport const addContactError = createAction('phonebook/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'phonebook/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'phonebook/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('phonebook/deleteContactError');\n\nexport const getContactRequest = createAction('phonebook/getContactRequest');\nexport const getContactSuccess = createAction('phonebook/getContactSuccess');\nexport const getContactError = createAction('phonebook/getContactError');\n\nexport const filterContact = createAction('phonebook/filterContact');\n","import {\n  addContactError,\n  addContactRequest,\n  addContactSuccess,\n  deleteContactError,\n  deleteContactSuccess,\n  deleteContactRequest,\n  getContactError,\n  getContactRequest,\n  getContactSuccess,\n} from './phonebook-actions';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:4040/';\nexport const addContact = contact => dispatch => {\n  dispatch(addContactRequest());\n  axios\n    .post('contacts', contact)\n    .then(response => dispatch(addContactSuccess(response.data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete('contacts/' + id)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport const contactFetch = () => dispatch => {\n  dispatch(getContactRequest());\n  axios\n    .get('contacts')\n    .then(response => dispatch(getContactSuccess(response.data)))\n    .catch(error => dispatch(getContactError(error)));\n};\n","import React from 'react'; //при закоментированом варианте нужно сюда дописать { Component }\nimport style from '../ContactForm/contactForm.module.css';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/phoneBook/phonebook-operations';\n\nconst ContactForm = ({\n  onSetName,\n  onAddContact,\n  name,\n  number,\n  addContact,\n  reset,\n}) => {\n  const handleAddContact = e => {\n    e.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n    addContact(contact);\n    reset();\n  };\n\n  return (\n    <form className={style.form} onSubmit={handleAddContact}>\n      <label style={{ marginBottom: '10px' }}>\n        Name\n        <input\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          placeholder=\"Enter contact name\"\n          required\n          onInput={onSetName}\n          // onChange={options.handleChange}\n        />\n      </label>\n      <label className={style.labelPhone}>\n        Phone\n        <input\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          placeholder=\"Enter contact phone\"\n          required\n          onInput={onSetName}\n          // onChange={options.handleChange}\n        />\n      </label>\n      <button type=\"submit\" className={style.button}>\n        Отправить\n      </button>\n    </form>\n  );\n};\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addContact: contact => dispatch(addContact(contact)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\n// import shortid from 'shortid';\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     tel: '',\n//   };\n//   nameInputId = shortid.generate();\n//   telInputId = shortid.generate();\n\n//   handleChange = event => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   // formSubmitHandler = data => {\n//   //   console.log(data);\n//   // };\n\n//   reset = () => {\n//     this.setState({ name: '', tel: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit} style={{ display: 'grid' }}>\n//         <label htmlFor={this.nameInputId} style={{ marginBottom: '10px' }}>\n//           Name\n//           <input\n//             value={this.state.name}\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             placeholder=\"Enter contact name\"\n//             required\n//             onChange={this.handleChange}\n//             id={this.nameInputId}\n//           />\n//         </label>\n//         <label htmlFor={this.telInputId}>\n//           Phone\n//           <input\n//             value={this.state.tel}\n//             type=\"tel\"\n//             name=\"tel\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             placeholder=\"Enter contact phone\"\n//             required\n//             onChange={this.handleChange}\n//             id={this.telInputId}\n//           />\n//         </label>\n//         <button type=\"submit\" style={{ width: '300px' }}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n","function getFilteredContacts(contacts, filter) {\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase().trim()),\n  );\n}\n\nexport default getFilteredContacts;\n","import { useEffect } from 'react';\nimport style from '../ContactList/contactList.module.css';\nimport getFilteredContacts from '../../helpers/filterContacts';\n\nconst ContactList = ({ contacts, deleteContact, filter, onContactFetch }) => {\n  const contactsArr = getFilteredContacts(contacts, filter);\n  useEffect(() => {\n    onContactFetch();\n  }, [onContactFetch]);\n  return (\n    <div>\n      <h2>Contacts</h2>\n      <ul className={style.list}>\n        {contactsArr.map(({ name, number, id }) => (\n          <li key={id}>\n            <p>Name:{name}</p>\n            <p>Number:{number}</p>\n            <button id={id} onClick={() => deleteContact(id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport {\n  deleteContact,\n  contactFetch,\n} from '../../redux/phoneBook/phonebook-operations';\nimport ContactList from './ContactList';\nconst mapStateToProps = state => ({\n  contacts: state.phonebookContacts,\n  filter: state.phonebookFilter,\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteContact: id => dispatch(deleteContact(id)),\n    onContactFetch: () => dispatch(contactFetch()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n// import style from '../ContactFilter/contactFilter.module.css';\nimport { filterContact } from '../../redux/phoneBook/phonebook-actions';\n\nconst ContactFilter = ({ onSetFilter, filter }) => (\n  <>\n    <label>\n      <p>Search for contacts</p>\n      <input onInput={onSetFilter} type=\"text\" name=\"filter\" value={filter} />\n    </label>\n  </>\n);\n\nconst mapStateToProps = state => ({\n  filter: state.phonebookFilter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSetFilter: ({ target: { value } }) => dispatch(filterContact(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);\n","import React from 'react'; //при закоментированом варианте нужно сюда дописать { Component }\nimport { useState, useEffect } from 'react';\nimport style from './app.module.css';\n\n//libraries\n// import shortid from 'shortid';\n\n//helpers\n// import getFilteredContacts from '../../helpers/filterContacts';\n\n//Components\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList.container';\nimport ContactFilter from '../ContactFilter/ContactFilter';\n\nconst initilState = {\n  name: '',\n  number: '',\n};\n\nfunction App() {\n  const [state, setState] = useState(initilState);\n\n  useEffect(() => {\n    setState(prev => ({\n      ...prev,\n      contacts:\n        JSON.parse(localStorage.getItem('contacts')) !== null\n          ? JSON.parse(localStorage.getItem('contacts'))\n          : [],\n    }));\n  }, []);\n\n  //Метод, который в State записывает введенные name і number\n  const handleSetName = ({ target: { name, value } }) => {\n    setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  //Добавляем контакт в наш массив контактов\n  // const handleAddContact = e => {\n  //   e.preventDefault();\n  //   const contact = {\n  //     name: state.name,\n  //     number: state.number,\n  //     id: shortid.generate(),\n  //   };\n  //   if (state.contacts.map(el => el.name).includes(state.name)) {\n  //     alert('Остановись, контакт с таким именем уже существует');\n  //     return;\n  //   }\n  //   localStorage.setItem(\n  //     'contacts',\n  //     JSON.stringify([...state.contacts, contact]),\n  //   );\n  //   setState(prev => ({\n  //     ...prev,\n  //     contacts: [...prev.contacts, contact],\n  //     name: '',\n  //     number: '',\n  //   }));\n  // };\n\n  const handleReset = () => {\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  //Удаляем контакт из ContactList\n  // const handleDeleteContact = ({ target: { id } }) => {\n  //   setState(prev => ({\n  //     ...prev,\n  //     contacts: state.contacts.filter(el => el.id !== id),\n  //   }));\n  //   localStorage.setItem(\n  //     'contacts',\n  //     JSON.stringify(state.contacts.filter(el => el.id !== id)),\n  //   );\n  // };\n\n  //Делаем фильтр контактов\n  // const contacts = getFilteredContacts(state.contacts, state.filter);\n\n  return (\n    <div className={style.app}>\n      <h1>Phonebook</h1>\n      <ContactForm\n        onSetName={handleSetName}\n        reset={handleReset}\n        name={state.name}\n        number={state.number}\n        // onAddContact={handleAddContact}\n        // onSubmit={this.formSubmit}\n        // input={this.state}\n        // options={this}\n        // optionsTel={this.handleTelChange}\n      />\n      {/* {state.contacts.length > 1 && <ContactFilter />} */}\n      <ContactFilter />\n      <ContactList />\n    </div>\n  );\n}\n\n// Первый вариант\n// class App extends Component {\n//   state = {\n//     inputValue: '',\n//     name: '',\n//     tel: '',\n//   };\n\n//   // handleChange = event => {\n//   //   const { name, value } = event.currentTarget;\n//   //   this.setState({ [name]: value });\n//   // };\n\n//   // handleSubmit = event => {\n//   //   event.preventDefault();\n//   //   console.log(this.state);\n//   // };\n\n//   formSubmit = event => {\n//     console.log(event);\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <h1>Phonebook</h1>\n//         <ContactForm\n//           onSubmit={this.formSubmit}\n//           // input={this.state}\n//           // options={this}\n//           // optionsTel={this.handleTelChange}\n//         />\n//         <h2>Contacts</h2>\n//         {/* <Filter ... /> */}\n//         {/* <ContactList ... /> */}\n//       </>\n//     );\n//   }\n// }\n\nexport default App;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  addContactError,\n  addContactSuccess,\n  addContactRequest,\n  deleteContactError,\n  deleteContactSuccess,\n  deleteContactRequest,\n  getContactSuccess,\n  getContactRequest,\n  getContactError,\n  filterContact,\n} from './phonebook-actions';\n\nconst phonebookContacts = createReducer([], {\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n  [getContactSuccess]: (_, { payload }) => payload,\n});\n\nconst phonebookFilter = createReducer('', {\n  [filterContact]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [addContactRequest]: () => true,\n  [addContactError]: () => false,\n  [addContactSuccess]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactError]: () => false,\n  [deleteContactSuccess]: () => false,\n  [getContactRequest]: () => true,\n  [getContactError]: () => false,\n  [getContactSuccess]: () => false,\n});\n\nexport const rootReducer = combineReducers({\n  phonebookContacts,\n  phonebookFilter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { rootReducer } from './phoneBook/phonebook-reducer';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['phonebookFilter'],\n// };\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n    logger,\n  ],\n  devTools: true,\n});\n\n// const persistor = persistStore(store);\n// export const configs = { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={configs.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}